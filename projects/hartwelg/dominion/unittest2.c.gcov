        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:// set NOISY_TEST to 0 to remove printfs from output
        -:    9:#define NOISY_TEST 1
        -:   10:
        -:   11:#define asserttrue(bool) if(bool) printf("TEST SUCCESSFULLY COMPLETED.\n"); else printf("TEST FAILED: '" #bool  "' on line %d.\n", __LINE__);
        -:   12:
        1:   13:int main() {
        1:   14:    int seed = 1000;
        1:   15:    int numPlayers = 2;
        1:   16:    int thisPlayer = 0;
        -:   17:    struct gameState G;
        1:   18:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   19:            sea_hag, tribute, smithy, council_room};
        -:   20:
        -:   21:    // initialize a game state and player cards
        1:   22:    initializeGame(numPlayers, k, seed, &G);
        -:   23:
        1:   24:    printf ("TESTING discardCard():\n");
        -:   25:    
        1:   26:        printf("Adding 5 cards to player's hand\n");
        1:   27:        G.hand[thisPlayer][0] = copper;
        1:   28:        G.hand[thisPlayer][1] = remodel;
        1:   29:        G.hand[thisPlayer][2] = gold;
        1:   30:        G.hand[thisPlayer][3] = council_room;
        1:   31:        G.hand[thisPlayer][4] = gardens;
        -:   32:
        1:   33:        printf("Testing for player not having 6 cards\n");
        1:   34:        asserttrue(G.handCount[thisPlayer] != 6);
        -:   35:
        1:   36:        printf("Player has 5 cards in hand\n");
        1:   37:        asserttrue(G.handCount[thisPlayer] == 5);
        -:   38:
        1:   39:        printf("Removing 1 card\n");
        1:   40:        discardCard(0, thisPlayer, &G, 1);
        -:   41:
        1:   42:        printf("Player has 4 cards in hand\n");
        1:   43:        asserttrue(G.handCount[thisPlayer] == 4);
        -:   44:
        1:   45:        printf("Removing 1 card\n");
        1:   46:        discardCard(1, thisPlayer, &G, 1);
        -:   47:
        1:   48:        printf("Player has 3 cards in hand\n");
        1:   49:        asserttrue(G.handCount[thisPlayer] == 3);
        -:   50:
        1:   51:        printf("Removing 1 card\n");
        1:   52:        discardCard(2, thisPlayer, &G, 1);
        -:   53:
        1:   54:        printf("Player has 2 cards in hand\n");
        1:   55:        asserttrue(G.handCount[thisPlayer] == 2);
        -:   56:
        1:   57:        printf("Removing 1 card\n");
        1:   58:        discardCard(3, thisPlayer, &G, 1);
        -:   59:
        1:   60:        printf("Player has 1 card in hand\n");
        1:   61:        asserttrue(G.handCount[thisPlayer] == 1);
        -:   62:
        1:   63:        printf("Removing 1 card\n");
        1:   64:        discardCard(4, thisPlayer, &G, 1);
        -:   65:
        1:   66:        printf("Player has 0 cards in hand\n");
        1:   67:        asserttrue(G.handCount[thisPlayer] == 0);
        -:   68:
        1:   69:        printf("Removing 1 card, testing that hand does not have < 0 cards\n");
        1:   70:        discardCard(4, thisPlayer, &G, 1);
        1:   71:        asserttrue(G.handCount[thisPlayer] != -1);
        -:   72:
        1:   73:    printf("All tests complete!\n");
        -:   74:
        1:   75:    return 0;
        -:   76:}
