        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:// set NOISY_TEST to 0 to remove printfs from output
        -:    9:#define NOISY_TEST 1
        -:   10:
        -:   11:#define asserttrue(bool) if(bool) printf("TEST SUCCESSFULLY COMPLETED.\n"); else printf("TEST FAILED: '" #bool  "' on line %d.\n", __LINE__);
        -:   12:
        1:   13:int main() {
        1:   14:    int seed = 1000;
        1:   15:    int numPlayers = 2;
        1:   16:    int thisPlayer = 0;
        -:   17:	struct gameState G;
        1:   18:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   19:			sea_hag, tribute, smithy, council_room};
        -:   20:
        -:   21:	// initialize a game state and player cards
        1:   22:	initializeGame(numPlayers, k, seed, &G);
        -:   23:
        1:   24:    printf ("TESTING handCard():\n");
        -:   25:    
        1:   26:    printf("Adding 5 cards to player's hand\n");
        1:   27:        G.hand[thisPlayer][0] = copper;
        1:   28:        G.hand[thisPlayer][1] = remodel;
        1:   29:        G.hand[thisPlayer][2] = gold;
        1:   30:        G.hand[thisPlayer][3] = council_room;
        1:   31:        G.hand[thisPlayer][4] = gardens;
        -:   32:
        1:   33:    printf("Testing that first card in hand is copper\n");
        1:   34:    asserttrue(G.hand[thisPlayer][0] == copper);
        -:   35:
        1:   36:    printf("Testing that second card in hand is remodel\n");
        1:   37:    asserttrue(G.hand[thisPlayer][1] == remodel);
        -:   38:
        1:   39:    printf("Testing that third card in hand is gold\n");
        1:   40:    asserttrue(G.hand[thisPlayer][2] == gold);
        -:   41:
        1:   42:    printf("Testing that fourth card in hand is council room\n");
        1:   43:    asserttrue(G.hand[thisPlayer][3] == council_room);
        -:   44:
        1:   45:    printf("Testing that fifth card in hand is gardens\n");
        1:   46:    asserttrue(G.hand[thisPlayer][4] == gardens);
        -:   47:
        1:   48:    printf("Testing that there is no sixth card in hand\n");
        1:   49:    asserttrue(G.hand[thisPlayer][5] == copper);
        -:   50:
        1:   51:    printf("All tests complete!\n");
        -:   52:
        1:   53:    return 0;
        -:   54:}
